{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10138543,"sourceType":"datasetVersion","datasetId":6257194}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Movie rating prediction is an advanced process in the field of machine learning and data science that aims to forecast the rating that a user might give to a movie based on a variety of features. These features can include a wide range of attributes, such as the movie's genre, director, cast, year of release, duration, language, and even user-specific factors such as previous viewing history or preferences. The goal of a movie rating prediction system is to build a predictive model that can accurately estimate the ratings a user might assign to a movie based on these attributes, thereby offering personalized recommendations that help users discover new films they are likely to enjoy.\r\n\r\nThe process begins with **data collection**, where large datasets of movies are gathered from various movie databases, such as IMDb, Rotten Tomatoes, or even custom datasets. These datasets typically contain essential information about the movies, including but not limited to movie titles, genres, director names, cast members, release years, movie durations, box office earnings, and of course, the ratings that users have given. Sometimes, additional metadata such as production studios, movie budgets, or the presence of critical reviews can also play an important role.\r\n\r\nOnce the data is collected, **data preprocessing** steps are undertaken to clean and prepare the data for analysis. This might include handling missing values, converting categorical variables (such as genres or directors) into numerical formats through techniques like one-hot encoding, and scaling numerical features like movie duration or year of release to a common range. Missing data might be imputed using statistical methods or by using domain-specific knowledge to fill in gaps. Data preprocessing is critical because it ensures that the machine learning model receives high-quality, well-organized data that can lead to accurate predictions.\r\n\r\n**Feature engineering** is another crucial part of the movie rating prediction process. In this phase, domain-specific features that may affect ratings are extracted or derived. For example, sentiment analysis can be performed on user reviews or movie synopses to capture the emotional tone, which can be a useful indicator of movie quality. Other engineered features might include a movie’s popularity, the number of awards it has won, or even the collaboration between popular actors and directors. This phase also involves determining the relative importance of each feature in predicting movie ratings. Some features, such as the director's reputation or the star power of the cast, may have a stronger influence on a movie’s rating than others, such as the year of release.\r\n\r\nAfter preparing the data, the **model-building phase** begins. This is where machine learning algorithms are employed to train a model to predict movie ratings. Several types of machine learning models can be used, depending on the complexity and the nature of the data. For instance, simpler models like **linear regression** might work if the relationship between features and ratings is relatively straightforward. On the other hand, more complex models such as **decision trees**, **random forests**, or **support vector machines (SVM)** may be used for better accuracy when the relationships are non-linear. In more advanced systems, **neural networks** and deep learning models can be employed to uncover intricate patterns within the data. A crucial aspect of model building is to ensure that the model can generalize well to unseen data, meaning it should not overfit to the training data.\r\n\r\nOnce the model is trained, it needs to be **evaluated** to assess its performance. This is typically done by using a separate validation or test dataset that was not seen during the training process. Common evaluation metrics for regression-based models include **Mean Absolute Error (MAE)**, **Mean Squared Error (MSE)**, and **R-squared**, which indicate how closely the model's predictions match the actual ratings. Cross-validation techniques can also be used to ensure that the model's performance is consistent and not biased toward any particular subset of data.\r\n\r\nAfter model evaluation, the system is ready for **deployment**. In real-world applications, a trained movie rating prediction model can be integrated into movie recommendation systems, such as those found on streaming platforms like Netflix, Amazon Prime Video, or Disney+. The system can recommend movies to users based on predicted ratings tailored to their personal preferences. For instance, if a user has previously enjoyed action movies featuring a particular actor or director, the model can predict the rating they might give to similar movies and suggest them accordingly.\r\n\r\nOver time, these models can be further refined through continuous feedback. As users watch more movies and provide ratings, their new preferences can be integrated into the model, improving the accuracy of future predictions. Some systems use **collaborative filtering**, where the ratings of similar users are considered, or **content-based filtering**, where movie features are used to recommend movies that are similar to those the user has already rated highly.\r\n\r\nMovie rating prediction is a powerful tool that can significantly enhance the user experience in digital entertainment platforms. It allows for highly personalized movie recommendations that match the tastes and preferences of individual users. The ability to predict ratings with high accuracy not only helps users find movies they’re likely to enjoy but also contributes to user engagement, retention, and overall satisfaction. Furthermore, it provides movie production companies with valuable insights into what types of films audiences may prefer, guiding decisions related to casting, production, and marketing. With the growing wealth of data and advancements in machine learning algorithms, movie rating prediction systems are becoming more accurate and sophisticated, paving the way for a more personalized movie-watching experience.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy import stats\nimport seaborn as sns\n\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingRegressor\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.161708Z","iopub.execute_input":"2024-12-08T13:30:33.162100Z","iopub.status.idle":"2024-12-08T13:30:33.169602Z","shell.execute_reply.started":"2024-12-08T13:30:33.162065Z","shell.execute_reply":"2024-12-08T13:30:33.168484Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/dataset-movie/IMDb Movies India.csv', encoding='ISO-8859-1')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.179765Z","iopub.execute_input":"2024-12-08T13:30:33.180538Z","iopub.status.idle":"2024-12-08T13:30:33.228586Z","shell.execute_reply.started":"2024-12-08T13:30:33.180488Z","shell.execute_reply":"2024-12-08T13:30:33.227787Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.230382Z","iopub.execute_input":"2024-12-08T13:30:33.231082Z","iopub.status.idle":"2024-12-08T13:30:33.244738Z","shell.execute_reply.started":"2024-12-08T13:30:33.231026Z","shell.execute_reply":"2024-12-08T13:30:33.243712Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.245896Z","iopub.execute_input":"2024-12-08T13:30:33.246211Z","iopub.status.idle":"2024-12-08T13:30:33.261460Z","shell.execute_reply.started":"2024-12-08T13:30:33.246181Z","shell.execute_reply":"2024-12-08T13:30:33.260547Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.263894Z","iopub.execute_input":"2024-12-08T13:30:33.264639Z","iopub.status.idle":"2024-12-08T13:30:33.271213Z","shell.execute_reply.started":"2024-12-08T13:30:33.264607Z","shell.execute_reply":"2024-12-08T13:30:33.270187Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.shape\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.272372Z","iopub.execute_input":"2024-12-08T13:30:33.273296Z","iopub.status.idle":"2024-12-08T13:30:33.278943Z","shell.execute_reply.started":"2024-12-08T13:30:33.273266Z","shell.execute_reply":"2024-12-08T13:30:33.277938Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.280035Z","iopub.execute_input":"2024-12-08T13:30:33.280359Z","iopub.status.idle":"2024-12-08T13:30:33.295572Z","shell.execute_reply.started":"2024-12-08T13:30:33.280331Z","shell.execute_reply":"2024-12-08T13:30:33.294512Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.dropna(subset=['Rating'], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.296731Z","iopub.execute_input":"2024-12-08T13:30:33.297016Z","iopub.status.idle":"2024-12-08T13:30:33.304130Z","shell.execute_reply.started":"2024-12-08T13:30:33.296989Z","shell.execute_reply":"2024-12-08T13:30:33.303305Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.306080Z","iopub.execute_input":"2024-12-08T13:30:33.306355Z","iopub.status.idle":"2024-12-08T13:30:33.321137Z","shell.execute_reply.started":"2024-12-08T13:30:33.306327Z","shell.execute_reply":"2024-12-08T13:30:33.320110Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['Genre'].fillna('Unknown', inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.322140Z","iopub.execute_input":"2024-12-08T13:30:33.322776Z","iopub.status.idle":"2024-12-08T13:30:33.328830Z","shell.execute_reply.started":"2024-12-08T13:30:33.322745Z","shell.execute_reply":"2024-12-08T13:30:33.328027Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.329931Z","iopub.execute_input":"2024-12-08T13:30:33.330213Z","iopub.status.idle":"2024-12-08T13:30:33.342864Z","shell.execute_reply.started":"2024-12-08T13:30:33.330184Z","shell.execute_reply":"2024-12-08T13:30:33.341912Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.dropna(subset=['Actor 1', 'Actor 2', 'Actor 3'], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.343847Z","iopub.execute_input":"2024-12-08T13:30:33.344096Z","iopub.status.idle":"2024-12-08T13:30:33.354297Z","shell.execute_reply.started":"2024-12-08T13:30:33.344071Z","shell.execute_reply":"2024-12-08T13:30:33.353471Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.357118Z","iopub.execute_input":"2024-12-08T13:30:33.357796Z","iopub.status.idle":"2024-12-08T13:30:33.370769Z","shell.execute_reply.started":"2024-12-08T13:30:33.357752Z","shell.execute_reply":"2024-12-08T13:30:33.369813Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.371898Z","iopub.execute_input":"2024-12-08T13:30:33.372264Z","iopub.status.idle":"2024-12-08T13:30:33.381390Z","shell.execute_reply.started":"2024-12-08T13:30:33.372223Z","shell.execute_reply":"2024-12-08T13:30:33.380446Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['Year'] = df['Year'].str.extract(r'(\\d+)').astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.382391Z","iopub.execute_input":"2024-12-08T13:30:33.382669Z","iopub.status.idle":"2024-12-08T13:30:33.402811Z","shell.execute_reply.started":"2024-12-08T13:30:33.382641Z","shell.execute_reply":"2024-12-08T13:30:33.401961Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['Votes'] = df['Votes'].str.extract(r'(\\d+)').astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.403841Z","iopub.execute_input":"2024-12-08T13:30:33.404120Z","iopub.status.idle":"2024-12-08T13:30:33.423466Z","shell.execute_reply.started":"2024-12-08T13:30:33.404093Z","shell.execute_reply":"2024-12-08T13:30:33.422620Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.424684Z","iopub.execute_input":"2024-12-08T13:30:33.424985Z","iopub.status.idle":"2024-12-08T13:30:33.435448Z","shell.execute_reply.started":"2024-12-08T13:30:33.424957Z","shell.execute_reply":"2024-12-08T13:30:33.434483Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.437993Z","iopub.execute_input":"2024-12-08T13:30:33.438295Z","iopub.status.idle":"2024-12-08T13:30:33.452972Z","shell.execute_reply.started":"2024-12-08T13:30:33.438266Z","shell.execute_reply":"2024-12-08T13:30:33.452061Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Set the dark background style\nplt.style.use('dark_background')\n\n# Define numerical columns to check for outliers\nnumerical_columns = ['Year', 'Votes']\n\n# Custom colors for the box plots\ncolors = ['#FF5733', '#33FF57']\n\n# Box plots before removing outliers\nplt.figure(figsize=(10, 6))\nplt.suptitle('Box Plots Before Removing Outliers', fontsize=16, color='cyan')\nfor i, column in enumerate(numerical_columns, 1):\n    plt.subplot(1, len(numerical_columns), i)\n    plt.boxplot(\n        df[column],\n        patch_artist=True,\n        boxprops=dict(facecolor=colors[i-1], color='white'),\n        medianprops=dict(color='yellow', linewidth=2),\n        flierprops=dict(marker='o', color='white', markersize=6),\n    )\n    plt.title(column, color='white')\n    plt.grid(True, color='gray', linestyle='--', linewidth=0.5)\nplt.tight_layout()\nplt.show()\n\n# Calculate z-scores and remove outliers\nz_score_threshold = 2\nz_scores = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()\noutliers = (z_scores.abs() > z_score_threshold).any(axis=1)\n\n# Display and remove outliers\nprint(\"Number of rows with outliers before removal:\", outliers.sum())\ndf = df[~outliers]\n\n# Box plots after removing outliers\nplt.figure(figsize=(10, 6))\nplt.suptitle('Box Plots After Removing Outliers', fontsize=16, color='cyan')\nfor i, column in enumerate(numerical_columns, 1):\n    plt.subplot(1, len(numerical_columns), i)\n    plt.boxplot(\n        df[column],\n        patch_artist=True,\n        boxprops=dict(facecolor=colors[i-1], color='white'),\n        medianprops=dict(color='yellow', linewidth=2),\n        flierprops=dict(marker='o', color='white', markersize=6),\n    )\n    plt.title(column, color='white')\n    plt.grid(True, color='gray', linestyle='--', linewidth=0.5)\n    plt.text(\n        1.1,\n        df[column].median(),\n        f\"Rows: {len(df)}\",\n        color='white',\n        fontsize=10,\n        va='center',\n        ha='left',\n        bbox=dict(boxstyle=\"round,pad=0.3\", edgecolor='gray', facecolor='black'),\n    )\nplt.tight_layout()\nplt.show()\n\n# Display remaining rows\nprint(\"Number of rows after removing outliers:\", len(df))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:33.454754Z","iopub.execute_input":"2024-12-08T13:30:33.455105Z","iopub.status.idle":"2024-12-08T13:30:34.190397Z","shell.execute_reply.started":"2024-12-08T13:30:33.455074Z","shell.execute_reply":"2024-12-08T13:30:34.189409Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Create a gradient background\nfrom matplotlib.colors import LinearSegmentedColormap\nbackground_cmap = LinearSegmentedColormap.from_list(\"custom_gradient\", [\"#0F2027\", \"#203A43\", \"#2C5364\"])\n\n# Generate the histogram\nplt.figure(figsize=(12, 7))\nplt.imshow(np.linspace(0, 1, 256).reshape(1, -1), aspect='auto', cmap=background_cmap, extent=(0, 10, 0, 100))\n\n# Overlay the histogram\nsns.histplot(\n    data=df, \n    x='Rating', \n    bins=30, \n    kde=True, \n    color='#FFC857', \n    edgecolor='black', \n    linewidth=0.7, \n    alpha=0.9\n)\n\n# Customize the KDE line\nsns.kdeplot(\n    data=df['Rating'], \n    color='#A53860', \n    linewidth=2.5, \n    linestyle='--', \n    alpha=0.8\n)\n\n# Annotate bars with their heights\ncounts, bins = np.histogram(df['Rating'], bins=30)\nfor i in range(len(bins) - 1):\n    plt.text(\n        bins[i] + (bins[i + 1] - bins[i]) / 2, \n        counts[i] + 5, \n        str(counts[i]), \n        ha='center', \n        color='white', \n        fontsize=10, \n        weight='bold'\n    )\n\n# Add title and axis labels\nplt.title(\n    '🎬 Distribution of Movie Ratings 🎥', \n    fontsize=20, \n    color='white', \n    fontweight='bold', \n    pad=20\n)\nplt.xlabel('Rating', fontsize=14, color='white', labelpad=10)\nplt.ylabel('Frequency', fontsize=14, color='white', labelpad=10)\n\n# Customize ticks and grid\nplt.xticks(fontsize=12, color='white')\nplt.yticks(fontsize=12, color='white')\nplt.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.3)\n\n# Final touches\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:34.191643Z","iopub.execute_input":"2024-12-08T13:30:34.191943Z","iopub.status.idle":"2024-12-08T13:30:34.738072Z","shell.execute_reply.started":"2024-12-08T13:30:34.191914Z","shell.execute_reply":"2024-12-08T13:30:34.737081Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Create a gradient background\ngradient_cmap = LinearSegmentedColormap.from_list(\"votes_gradient\", [\"#1E3C72\", \"#2A5298\"])\n\n# Plot the background gradient\nplt.figure(figsize=(12, 7))\nplt.imshow(\n    np.linspace(0, 1, 256).reshape(1, -1),\n    aspect='auto',\n    cmap=gradient_cmap,\n    extent=(df['Votes'].min(), df['Votes'].max(), 0, df['Votes'].max() // 2)\n)\n\n# Overlay the histogram with metallic gradient color\nsns.histplot(\n    data=df,\n    x='Votes',\n    bins=30,\n    kde=True,\n    color='#FFB400',\n    edgecolor='black',\n    linewidth=0.5,\n    alpha=0.9\n)\n\n# Glow effect for KDE line\nsns.kdeplot(\n    data=df['Votes'],\n    color='#FF4500',\n    linewidth=2.5,\n    alpha=0.8\n)\n\n# Annotate bars with frequency values\ncounts, bins = np.histogram(df['Votes'], bins=30)\nfor i in range(len(bins) - 1):\n    plt.text(\n        bins[i] + (bins[i + 1] - bins[i]) / 2,\n        counts[i] + (max(counts) * 0.02),\n        str(counts[i]),\n        ha='center',\n        color='white',\n        fontsize=10,\n        weight='bold'\n    )\n\n# Add title and labels with enhanced styling\nplt.title(\n    '✨ Distribution of Votes ✨',\n    fontsize=20,\n    color='white',\n    fontweight='bold',\n    pad=20\n)\nplt.xlabel('Number of Votes', fontsize=14, color='white', labelpad=10)\nplt.ylabel('Frequency', fontsize=14, color='white', labelpad=10)\n\n# Adjust ticks and grid\nplt.xticks(fontsize=12, color='white')\nplt.yticks(fontsize=12, color='white')\nplt.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.3)\n\n# Final layout\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:34.739307Z","iopub.execute_input":"2024-12-08T13:30:34.739643Z","iopub.status.idle":"2024-12-08T13:30:35.300595Z","shell.execute_reply.started":"2024-12-08T13:30:34.739613Z","shell.execute_reply":"2024-12-08T13:30:35.299519Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Count the number of movies directed by each director\ndirector_counts = df['Director'].value_counts()\n\n# Select the top 10 directors with the most movies directed\ntop_10_directors = director_counts.head(10)\n\n# Set the style for the plot to enhance aesthetics\nplt.style.use('seaborn-darkgrid')\n\n# Create a bar plot to visualize the top 10 directors with the most movies directed\nplt.figure(figsize=(14, 7))\nsns.barplot(\n    x=top_10_directors.index, \n    y=top_10_directors.values, \n    palette='viridis'  # You can change the color palette here\n)\n\n# Add titles and labels with better formatting\nplt.title('Top 10 Directors with the Most Movies Directed', fontsize=18, fontweight='bold')\nplt.xlabel('Director', fontsize=14)\nplt.ylabel('Number of Movies Directed', fontsize=14)\n\n# Rotate x-axis labels for better readability and set font size\nplt.xticks(rotation=45, ha='right', fontsize=12)\n\n# Add value annotations above each bar\nfor i, value in enumerate(top_10_directors.values):\n    plt.text(i, value + 0.1, str(value), ha='center', va='bottom', fontsize=12, color='black')\n\n# Adjust layout to make sure everything fits\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:35.301834Z","iopub.execute_input":"2024-12-08T13:30:35.302139Z","iopub.status.idle":"2024-12-08T13:30:35.695485Z","shell.execute_reply.started":"2024-12-08T13:30:35.302110Z","shell.execute_reply":"2024-12-08T13:30:35.694549Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Count the number of movies in which each actor starred\nactor_counts = df[['Actor 1', 'Actor 2', 'Actor 3']].stack().value_counts()\n\n# Select the top 10 actors with the most movie appearances\ntop_10_actors = actor_counts.head(10)\n\n# Create a bar plot to visualize the top 10 actors with the most movie appearances\nplt.figure(figsize=(12, 6))\nplt.bar(top_10_actors.index, top_10_actors.values, color='skyblue')\n\n# Add titles and labels with better formatting\nplt.title('Top 10 Actors with the Most Movie Appearances', fontsize=16, fontweight='bold')\nplt.xlabel('Actor', fontsize=14)\nplt.ylabel('Number of Movie Appearances', fontsize=14)\n\n# Rotate x-axis labels for better readability and set font size\nplt.xticks(rotation=90, fontsize=12)\n\n# Adjust layout to make sure everything fits\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:35.696642Z","iopub.execute_input":"2024-12-08T13:30:35.696943Z","iopub.status.idle":"2024-12-08T13:30:36.247756Z","shell.execute_reply.started":"2024-12-08T13:30:35.696916Z","shell.execute_reply":"2024-12-08T13:30:36.246760Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Group the data by director and find the maximum rating within each group\ndirectors_max_rating = df.groupby('Director')['Rating'].max()\n\n# Sort the directors by their highest rating in descending order and select the top 10\ntop_10_directors = directors_max_rating.sort_values(ascending=False).head(10)\n\n# Create a figure with a dark background for a unique aesthetic\nplt.figure(figsize=(14, 8), facecolor='#2E2E2E')  # Dark background\n\n# Use a color palette for gradient effect based on ratings\ncolors = sns.color_palette(\"Blues\", len(top_10_directors))\n\n# Create a bar plot with customized colors\nbars = plt.bar(top_10_directors.index, top_10_directors.values, color=colors)\n\n# Add a title with enhanced font styling\nplt.title('Top 10 Directors with the Highest-Rated Movies', fontsize=18, fontweight='bold', color='white', pad=20)\n\n# Customize x and y labels\nplt.xlabel('Director', fontsize=14, fontweight='bold', color='white', labelpad=10)\nplt.ylabel('Maximum Rating', fontsize=14, fontweight='bold', color='white', labelpad=10)\n\n# Rotate x-tick labels to avoid overlap and increase readability\nplt.xticks(rotation=45, ha='right', fontsize=12, color='white')\n\n# Add grid lines with a transparent effect to not distract from the bars\nplt.grid(axis='y', linestyle='--', alpha=0.3)\n\n# Add data labels to the bars for additional context\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width() / 2, yval + 0.1, round(yval, 2),\n             ha='center', fontsize=12, color='white', fontweight='bold')\n\n# Adjust layout for clean presentation\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:36.248895Z","iopub.execute_input":"2024-12-08T13:30:36.249189Z","iopub.status.idle":"2024-12-08T13:30:36.540470Z","shell.execute_reply.started":"2024-12-08T13:30:36.249161Z","shell.execute_reply":"2024-12-08T13:30:36.539539Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Group the data by genre and calculate the mean rating for each genre\ngenre_mean_ratings = df.groupby('Genre')['Rating'].mean()\n\n# Sort the genres by mean rating in descending order and select the top 10\ntop_10_genres = genre_mean_ratings.sort_values(ascending=False).head(10)\n\n# Create a figure with a unique aesthetic (using a dark background)\nplt.figure(figsize=(14, 8), facecolor='#2E2E2E')\n\n# Use a color palette for a gradient effect based on mean rating\ncolors = sns.color_palette(\"coolwarm\", len(top_10_genres))\n\n# Create a bar plot with customized colors\nbars = plt.bar(top_10_genres.index, top_10_genres.values, color=colors)\n\n# Add a title with enhanced font styling\nplt.title('Top 10 Highly Rated Movie Genres', fontsize=18, fontweight='bold', color='white', pad=20)\n\n# Customize x and y labels\nplt.xlabel('Genre', fontsize=14, fontweight='bold', color='white', labelpad=10)\nplt.ylabel('Mean Rating', fontsize=14, fontweight='bold', color='white', labelpad=10)\n\n# Rotate x-tick labels to avoid overlap and improve readability\nplt.xticks(rotation=45, ha='right', fontsize=12, color='white')\n\n# Add grid lines for better readability, with a subtle style\nplt.grid(axis='y', linestyle='--', alpha=0.3)\n\n# Add data labels on top of each bar for additional clarity\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width() / 2, yval + 0.05, round(yval, 2),\n             ha='center', fontsize=12, color='white', fontweight='bold')\n\n# Adjust layout for optimal spacing and presentation\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:36.541608Z","iopub.execute_input":"2024-12-08T13:30:36.541906Z","iopub.status.idle":"2024-12-08T13:30:36.899726Z","shell.execute_reply.started":"2024-12-08T13:30:36.541877Z","shell.execute_reply":"2024-12-08T13:30:36.898689Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Filter the DataFrame for the most recent 20 years\nrecent_years = df[df['Year'] >= (max(df['Year']) - 19)]\n\n# Calculate the average rating per year\naverage_ratings = recent_years.groupby('Year')['Rating'].mean().reset_index()\n\n# Sort the DataFrame by average rating in descending order and select the top 10 years\ntop_10_years = average_ratings.nlargest(10, 'Rating')\n\n# Plot the top 10 years and their average ratings\nplt.figure(figsize=(10, 6))\nplt.bar(top_10_years['Year'], top_10_years['Rating'])\nplt.xlabel('Year')\nplt.ylabel('Average Rating')\nplt.title('Top 10 Years with Highest Average Ratings (Recent 20 Years)')\nplt.xticks(top_10_years['Year'])\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:30:36.900864Z","iopub.execute_input":"2024-12-08T13:30:36.901148Z","iopub.status.idle":"2024-12-08T13:30:37.164155Z","shell.execute_reply.started":"2024-12-08T13:30:36.901122Z","shell.execute_reply":"2024-12-08T13:30:37.163129Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Ensure 'Rating' is included in the pairplot only if it's numerical\nnumerical_columns = df.select_dtypes(include=['number'])\n\n# Check if 'Rating' is a numerical column\nif 'Rating' in numerical_columns.columns:\n    hue_value = 'Rating'\nelse:\n    hue_value = None\n\n# Create a pair plot with enhanced visual features\npair_plot = sns.pairplot(\n    numerical_columns, \n    hue=hue_value,  # Apply hue only if 'Rating' is numerical\n    palette=\"coolwarm\",  # Apply custom color palette\n    kind='scatter',  # Use scatter plot for off-diagonal\n    markers='o',     # Change marker style\n    diag_kind='kde', # Use KDE plots for the diagonal\n    plot_kws={'alpha': 0.6}  # Adjust transparency for scatter plots\n)\n\n# Add a title with custom styling\npair_plot.fig.suptitle('Pair Plot of Numerical Variables with Rating as Hue', fontsize=16, fontweight='bold', y=1.02)\n\n# Show the plot\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:33:04.575908Z","iopub.execute_input":"2024-12-08T13:33:04.576702Z","iopub.status.idle":"2024-12-08T13:33:08.001560Z","shell.execute_reply.started":"2024-12-08T13:33:04.576667Z","shell.execute_reply":"2024-12-08T13:33:08.000625Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"DATA PREPROCESSING\n","metadata":{}},{"cell_type":"code","source":"X = df.drop('Rating', axis=1)\ny = df['Rating']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:34:00.633299Z","iopub.execute_input":"2024-12-08T13:34:00.634031Z","iopub.status.idle":"2024-12-08T13:34:00.640741Z","shell.execute_reply.started":"2024-12-08T13:34:00.633992Z","shell.execute_reply":"2024-12-08T13:34:00.639684Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:34:27.993339Z","iopub.execute_input":"2024-12-08T13:34:27.994174Z","iopub.status.idle":"2024-12-08T13:34:28.006985Z","shell.execute_reply.started":"2024-12-08T13:34:27.994132Z","shell.execute_reply":"2024-12-08T13:34:28.005970Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:35:03.676944Z","iopub.execute_input":"2024-12-08T13:35:03.677730Z","iopub.status.idle":"2024-12-08T13:35:03.683835Z","shell.execute_reply.started":"2024-12-08T13:35:03.677694Z","shell.execute_reply":"2024-12-08T13:35:03.682951Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Specify the categorical columns to be one-hot encoded\ncategorical_columns = ['Name', 'Genre', 'Director',\n       'Actor 1', 'Actor 2', 'Actor 3']\n\n# Initialize the OneHotEncoder\nohe = OneHotEncoder(sparse=False)\n\n# Fit and transform the categorical columns\nX_categorical_encoded = ohe.fit_transform(X[categorical_columns])\n\n# Retrieve feature names for the encoded columns\nfeature_names = []\nfor i, col in enumerate(categorical_columns):\n    categories = ohe.categories_[i]\n    for category in categories:\n        feature_names.append(f\"{col}_{category}\")\n\n# Create a DataFrame for the encoded features\nX_categorical_encoded_df = pd.DataFrame(X_categorical_encoded, columns=feature_names)\nX_categorical_encoded_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:35:19.269833Z","iopub.execute_input":"2024-12-08T13:35:19.270216Z","iopub.status.idle":"2024-12-08T13:35:19.736075Z","shell.execute_reply.started":"2024-12-08T13:35:19.270182Z","shell.execute_reply":"2024-12-08T13:35:19.735123Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# combine the scaled columns and onehotencoded columns\nX_final = pd.concat([X_categorical_encoded_df, ], axis=1)\nX_final.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:41:40.091236Z","iopub.execute_input":"2024-12-08T13:41:40.092052Z","iopub.status.idle":"2024-12-08T13:41:42.297959Z","shell.execute_reply.started":"2024-12-08T13:41:40.092009Z","shell.execute_reply":"2024-12-08T13:41:42.296977Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Instantiate StandardScaler\nscaler = MinMaxScaler()\n\n# Reshape 'Rating' to a 2D array for StandardScaler\ny_scaled = scaler.fit_transform(df['Rating'].values.reshape(-1, 1))\n\n# Convert 'y_scaled' back to a DataFrame\ny = pd.DataFrame(y_scaled, columns=['Rating'])\ny","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:38:27.395536Z","iopub.execute_input":"2024-12-08T13:38:27.396455Z","iopub.status.idle":"2024-12-08T13:38:27.407771Z","shell.execute_reply.started":"2024-12-08T13:38:27.396416Z","shell.execute_reply":"2024-12-08T13:38:27.406835Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X_final, y, test_size=0.3, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T13:42:01.389390Z","iopub.execute_input":"2024-12-08T13:42:01.390324Z","iopub.status.idle":"2024-12-08T13:42:02.063733Z","shell.execute_reply.started":"2024-12-08T13:42:01.390286Z","shell.execute_reply":"2024-12-08T13:42:02.062452Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Example feature importances and feature names (simulating a Random Forest model output)\nfeature_names = ['Year', 'Genre', 'Director', 'Duration', 'Votes', 'Actor 1', 'Actor 2', 'Actor 3', 'Rating', 'MovieID']\nfeature_importances = [0.12, 0.08, 0.15, 0.10, 0.09, 0.06, 0.07, 0.05, 0.14, 0.04]\n\n# Convert feature importances to a DataFrame for better sorting and visualization\nfeature_importance_df = pd.DataFrame({\n    'Feature': feature_names,\n    'Importance': feature_importances\n})\n\n# Sort the features by importance in descending order\nfeature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)\n\n# Plot the feature importances\nplt.figure(figsize=(10, 6))\nplt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'], color='skyblue')\nplt.xlabel('Feature Importance', fontsize=14)\nplt.ylabel('Feature', fontsize=14)\nplt.title('Feature Importance of Each Feature', fontsize=16)\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}